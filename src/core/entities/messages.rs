//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub chat_id: i64,
    #[sea_orm(column_type = "Text")]
    pub r#type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub action: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub date: String,
    #[sea_orm(column_type = "Text")]
    pub date_unixtime: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub from_user: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub from_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub edited: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub edited_unixtime: Option<String>,
    pub reply_to_message_id: Option<i64>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub text: Json,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub text_entities: Json,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub members: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub actor: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub actor_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub photo: Option<String>,
    pub width: Option<i32>,
    pub height: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub file: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub thumbnail: Option<String>,
    pub self_destruct_period_seconds: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub inviter: Option<String>,
    pub message_id: Option<i64>,
    pub game_message_id: Option<i64>,
    pub score: Option<i32>,
    pub amount: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub currency: Option<String>,
    pub invoice_message_id: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub recurring: Option<String>,
    pub duration_seconds: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub discard_reason: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub information_text: Option<String>,
    pub reason_app_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub reason_app_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub reason_domain: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub values: Option<Json>,
    pub to_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub to_user: Option<String>,
    pub distance: Option<i32>,
    pub period: Option<i32>,
    pub schedule_date: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub emoticon: Option<String>,
    pub cost: Option<i32>,
    pub months: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub new_title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub new_icon_emoji_id: Option<String>,
    pub button_id: Option<i32>,
    pub peer_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub author: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub forwarded_from: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub saved_from: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub via_bot: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub media_type: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub performer: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub mime_type: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub contact_information: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub contact_vcard: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub location_information: Option<Json>,
    pub live_location_period_seconds: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub place_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub game_title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub game_description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub game_link: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub invoice_information: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub poll: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub gift_code: Option<String>,
    pub boost_peer_id: Option<i32>,
    pub unclaimed: Option<bool>,
    pub via_giveaway: Option<bool>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub giveaway_information: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chats::Entity",
        from = "Column::ChatId",
        to = "super::chats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chats,
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chats.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
